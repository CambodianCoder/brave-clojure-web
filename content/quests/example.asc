---
title: "Do Things: a Clojure Crash Course"
---

= Do Things: a Clojure Crash Course
It's time to to learn how to actually _do things_ with Clojure! Hot
damn!

While you've undoubtedly heard of Clojure's awesome concurrency support
and other stupendous features, Clojure's most salient characteristic is
that it is a Lisp. In this chapter, you're going to explore the elements
which comprise this Lisp core: syntax, functions, and data. This will
provide you with a solid foundation for representing and solving
problems in Clojure.

This groundwork will also allow you to write some super important code.
In the last section, you'll tie everything together by creating a model
of a hobbit and writing a function to hit it in a random spot. Super!
Important!

As you go through the chapter, I recommend that you type out the
examples in a REPL and run them. Programming in a new language is a
skill, and, just like yodeling or synchronized swimming, you have to
practice it to learn it. By the way, "Synchronized Swimming for Yodelers
for the Brave and True" is due to be published in August of 20never.
Check it out!

[[syntax]]
== Syntax

Clojure's syntax is simple. Like all Lisps, it employs a uniform
structure, a handful of special operators, and a constant supply of
parentheses delivered from the parenthesis mines hidden beneath the
Massachusetts Institute of Technology, where Lisp was born.

[[forms]]
== Forms

All Clojure code is written in a uniform structure. Clojure understands:

1.  Literal representations of data structures like numbers, strings,
maps, and vectors
2.  Operations

We use the term *form* to refer to structurally valid code. These
literal representations are all valid forms:

[source,clojure]
-----------------------------
1
"a string"
["a" "vector" "of" "strings"]
-----------------------------

Your code will rarely contain free-floating literals, of course, since
they don't actually _do_ anything on their own. Instead, you'll use
literals in operations. Operations are how you __do things__. All
operations take the form, "opening parenthesis, operator, operands,
closing parenthesis":

[source, clojure]
-----------------------------------------
(operator operand1 operand2 ... operandn)
-----------------------------------------

Notice that there are no commas. Clojure uses whitespace to separate
operands and it treats commas as whitespace. Here are some example
operations:

[source, clojure]
----------------------------------------------------------------
(+ 1 2 3)
; => 6

(str "It was the panda " "in the library " "with a dust buster")
; => "It was the panda in the library with a dust buster"
----------------------------------------------------------------

To recap, Clojure consists of __forms__. Forms have a uniform structure.
They consist of literals and operations. Operations consist of forms
enclosed within parentheses.

For good measure, here's something that is not a form because it doesn't
have a closing parenthesis:

[source,clojure]
--
(+
--

Clojure's structural uniformity is probably different from what you're
used to. In other languages, different operations might have different
structures depending on the operator and the operands. For example,
JavaScript employs a smorgasbord of infix notation, dot operators, and
parentheses:

[source,javascript]
-------------------------------------------------------------------
1 + 2 + 3
"It was the panda ".concat("in the library ", "with a dust buster")
-------------------------------------------------------------------

Clojure's structure is very simple and consistent by comparison. No
matter what operator you're using or what kind of data you're operating
on, the structure is the same.

One final note: I'll also use the term *expression* to refer to Clojure
forms. Don't get too hung up on the terminology, though.

[[control-flow]]
=== Control Flow


Here are some basic control flow operators. Throughout the book you'll
encounter more.

[[if]]
==== if

The general structure of `if` is:

[source,clojure]
---------------------
(if boolean-form
  then-form
  optional-else-form)
---------------------

Here's an example:

[source,clojure]
-------------------
(if true
  "abra cadabra"
  "hocus pocus")
; => "abra cadabra"
-------------------

Notice that each branch of the `if` can only have one form. This is
different from most languages. For example, in Ruby you can write:

[source,ruby]
------------------------
if true
  doer.do_thing(1)
  doer.do_thing(2)
else
  other_doer.do_thing(1)
  other_doer.do_thing(2)
end
------------------------

To get around this apparent limitation, we have the `do` operator:

[[do]]
do
++

`do` lets you "wrap up" multiple forms. Try the following in your REPL:
